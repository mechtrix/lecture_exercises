[
  {
    "objectID": "Lecture_exercises.html",
    "href": "Lecture_exercises.html",
    "title": "Big Data exercises",
    "section": "",
    "text": "Below you can see R running in the browser. It is not as powerful as if we install R on the machine, but it spares us the hassle of setting R up on every of your Computers. You can type some simple math to try it out! You can run single lines by pressing Ctrl + Enter.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nAs most open source software, R builds upon loading libraries. Usually those are found on CRAN, but in our case they need to be provided. Let’s try loading libraries!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere we have loaded the dplyr package, which is used for data manipulation. It is part of the much bigger tidyverse. Since the packages always have to be installed, we will not use the more extensive command library(tidyverse). This would trigger to install a lot of packages. If you want to do this on your own machine, please do so"
  },
  {
    "objectID": "Lecture_exercises.html#your-personal-r-environment",
    "href": "Lecture_exercises.html#your-personal-r-environment",
    "title": "Big Data exercises",
    "section": "",
    "text": "Below you can see R running in the browser. It is not as powerful as if we install R on the machine, but it spares us the hassle of setting R up on every of your Computers. You can type some simple math to try it out! You can run single lines by pressing Ctrl + Enter.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Lecture_exercises.html#loading-libraries",
    "href": "Lecture_exercises.html#loading-libraries",
    "title": "Big Data exercises",
    "section": "",
    "text": "As most open source software, R builds upon loading libraries. Usually those are found on CRAN, but in our case they need to be provided. Let’s try loading libraries!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHere we have loaded the dplyr package, which is used for data manipulation. It is part of the much bigger tidyverse. Since the packages always have to be installed, we will not use the more extensive command library(tidyverse). This would trigger to install a lot of packages. If you want to do this on your own machine, please do so"
  },
  {
    "objectID": "Lecture_exercises.html#data-provided-by-r",
    "href": "Lecture_exercises.html#data-provided-by-r",
    "title": "Big Data exercises",
    "section": "data provided by R",
    "text": "data provided by R\nYou can simply use data that is natively provided by R. A famous example is the titanic data set. Do this using the data() command as provided below\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThere is not a lot that happened, because we do not use an IDE. An IDE like RStudio would acutally display the variables. This is a trade-off we have to live with the convinienct of not setting up R, but of course, there are ways around it. Below are a couple of ways to display data: - the printcommand is the most verbose way to output data - the head command prints only the first couple of lines (can be specified using head(object, n = X) - the glimpse command is very convenient, but needs the dplyr package to be loaded or referenced (with :: as shown below) - the str command give the structure of the object, so it provides a meta view of the variable. This is convenient if you have some unexpected output.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Lecture_exercises.html#csv",
    "href": "Lecture_exercises.html#csv",
    "title": "Big Data exercises",
    "section": "csv",
    "text": "csv\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nReading a csv is fairly simple, we just need the file path. Lucky for you this has been prepared, the file was already downloaded to the Virtual File System (VFS) that webR uses. Classically, we can use the read.csv() function from baseR. It is not as convenient, but you do not need to install or download any package to work with it. Check out the variable content using the commands above!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIn the tidyverse we also have the readr package. It give more flexibility, for example specifiying columns. We do not need to care about that now, but it is good to know.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nBut we can also explore the VFS a little by using the getwd() and the list.files() command. There you can see the flights.csv file that we read in before! When you output the complete VFS - what do you notice?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Lecture_exercises.html#api",
    "href": "Lecture_exercises.html#api",
    "title": "Big Data exercises",
    "section": "API",
    "text": "API\nBelow you can try to get data from an API. This is not yet possible using webR for technical and security reasons. In theory, it would go like this:\nThis is the Give Food API at givefood.org.uk and shall give us a brief introduction on how to work with API’s. We need two packages: httr and jsonlite. We are pulling data from a data source that does not need a key foodbank.\n\nlibrary(httr)\nlibrary(jsonlite)\n\nfoodbank &lt;- httr::GET(\"https://www.givefood.org.uk/api/2/foodbanks/\")\n\nfoodbankcontent &lt;- httr::content(foodbank, as = \"text\")\n\nNo encoding supplied: defaulting to UTF-8.\n\nfoodbankJSON &lt;- jsonlite::fromJSON(foodbankcontent)\n\nResponse [https://www.givefood.org.uk/api/2/foodbanks/]\n  Date: 2024-10-05 07:50\n  Status: 200\n  Content-Type: application/json\n  Size: 1.28 MB\n[\n  {\n    \"name\": \"Lapford Food Bank\",\n    \"alt_name\": null,\n    \"slug\": \"lapford\",\n    \"phone\": \"0136383788\",\n    \"secondary_phone\": null,\n    \"email\": \"foodbank@lapfordcc.org.uk\",\n    \"address\": \"Victory Hall\\r\\nLapford\\r\\nDevon\\r\\nEX17 6PZ\",\n    \"postcode\": \"EX17 6PZ\",\n...\nBut we can “fake” an API call, just to be able to play around a little with json files. For this we will download the data that is provided by the API as a csv and re-read it into R.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nOk, so now we have data, but what can we do with it? Below is some code where we count the foodbanks according to region in the UK.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe then add a ordered barplot so show the counts. Piece o’ cake!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Lecture_exercises.html#databases",
    "href": "Lecture_exercises.html#databases",
    "title": "Big Data exercises",
    "section": "Databases",
    "text": "Databases\nAs with API’s a real connection to a remote database is right now not feasible using webR. But we can use duckDB which is a fast in-process analytical database. It has one more advantage: It is locally hosted, which means it is a physical file on your machine. We also use dbplyr which is a database backend that uses the same or similar logic as dplyr for data manipulation with remote data sources.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  }
]